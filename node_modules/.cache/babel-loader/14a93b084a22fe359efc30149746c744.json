{"ast":null,"code":"var _jsxFileName = \"/Users/brigi.horvath/Documents/WebDev/React/React-authentication/src/components/Auth/AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext } from 'react';\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [, setIsLoading] = useState(false);\n  const AuthCtx = useContext();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const submitHandler = async event => {\n    try {\n      event.preventDefault();\n      const enteredEmail = emailInputRef.current.value;\n      const enteredPassword = passwordInputRef.current.value;\n      setIsLoading(true);\n      let url = '';\n\n      if (isLogin) {\n        url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAc60eTvbeCxkrzRf99FcxGNrUiCA3gBys';\n      } else {\n        url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAc60eTvbeCxkrzRf99FcxGNrUiCA3gBys';\n      }\n\n      const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setIsLoading(false);\n      const data = await response.json();\n\n      if (data && data.error) {\n        throw new Error(data.error.message);\n      }\n\n      console.log(data);\n    } catch (error) {\n      console.log(error); // let errorMessage = 'Authentication failed';\n\n      alert(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? 'Login' : 'Sign Up'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          ref: emailInputRef,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          ref: passwordInputRef,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          children: isLogin ? 'Login' : 'Create Account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler,\n          children: isLogin ? 'Create new account' : 'Login with existing account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"OiIPGjpS1rfIlJpUQjxYEK3mxpQ=\");\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["/Users/brigi.horvath/Documents/WebDev/React/React-authentication/src/components/Auth/AuthForm.js"],"names":["useState","useRef","useContext","AuthContext","classes","AuthForm","isLogin","setIsLogin","setIsLoading","AuthCtx","emailInputRef","passwordInputRef","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredPassword","url","response","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","data","json","error","Error","message","console","log","alert","auth","control","actions","toggle"],"mappings":"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","sourcesContent":["import { useState, useRef, useContext } from 'react';\nimport AuthContext from '../../store/auth-context';\n\nimport classes from './AuthForm.module.css';\n\nconst AuthForm = () => {\n  const [isLogin, setIsLogin] = useState(true);\n  const [, setIsLoading] = useState(false);\n  const AuthCtx = useContext();\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = async (event) => {\n    try {\n      event.preventDefault();\n      const enteredEmail = emailInputRef.current.value;\n      const enteredPassword = passwordInputRef.current.value;\n      setIsLoading(true);\n      let url = '';\n      if (isLogin) {\n        url =\n          'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAc60eTvbeCxkrzRf99FcxGNrUiCA3gBys';\n      } else {\n        url =\n          'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAc60eTvbeCxkrzRf99FcxGNrUiCA3gBys';\n      }\n      const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      setIsLoading(false);\n      const data = await response.json();\n      if (data && data.error) {\n        throw new Error(data.error.message);\n      }\n      console.log(data);\n    } catch (error) {\n      console.log(error);\n      // let errorMessage = 'Authentication failed';\n      alert(error);\n    }\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"email\" id=\"email\" ref={emailInputRef} required />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            ref={passwordInputRef}\n            required\n          />\n        </div>\n        <div className={classes.actions}>\n          <button>{isLogin ? 'Login' : 'Create Account'}</button>\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? 'Create new account' : 'Login with existing account'}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}